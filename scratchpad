```{r}
stipends_agg %>%
  filter(
    grepl("GVS", school_name)
    ) -> gvs

gvs %>%
  group_by(
    appointment_year, stipend_type, program_name
  ) %>%
  summarize(students = n_distinct(hashid)) -> tab_gvs_01

tab_gvs_01 %>%
  group_by(program_name, stipend_type) %>%
  pivot_wider(
    names_from = appointment_year,
    values_from = students
    ) %>%
  arrange(stipend_type) -> tab_gvs_02

DT::datatable(tab_gvs_02)

```

Total stipends?

```{r}

gvs %>%
  group_by(
    appointment_year, stipend_type, program_name
  ) %>%
  summarize(
    total_stipends = sum(funding)
  ) %>%
  group_by(
    appointment_year, program_name
  ) %>%
  mutate(
    program_total = sum(total_stipends)
  ) -> tab_gvs_03

tab_gvs_03 %>%
  ungroup() %>%
  distinct(
    appointment_year, program_name, program_total
  ) %>%
  group_by(
    program_name
  ) %>%
  pivot_wider(
    names_from = appointment_year,
    values_from = program_total
  ) -> tab_gvs_04

DT::datatable(tab_gvs_04)

```






# Some Decisions

The OHIO data were missing the Classification of Instructional Programs (CIP) codes, and these were added from a table OHIO's Institutional Effectiveness and Analytics  maintains. There were also a number of duplicate rows of data that had to be eliminated. Further, OHIO data includes data on stipends and other assistance attached to work that expects less than 20 hours per week, and this includes a few fellowships.

The Stipend Survey data provides summary statistics by program and four categories: (1) Teaching Assistant, (2) Research Assistant, (3) Graduate Assistant, and (4) All Ranks Combined. "Graduate assistants who typically are compensated at a higher level than most
graduate assistants because they are employed at a higher FTE or teach more classes.
They may earn almost as much as junior faculty members." Hence, only (1) and (2) make for meaningful comparisons with OHIO stipends.



```{r, eval=FALSE}

load("~/Downloads/grad_stipends/stipends.RData")

load("~/Downloads/grad_stipends/oufall2021_nodupes.RData")

oufall2021_nodupes %>%
  ungroup() %>%
  group_by(program_code) %>%
  filter(
    stipend_hours == max(stipend_hours, na.rm = TRUE)
  ) -> ohio

```

Merging the two data frames.

```{r, eval=FALSE}

ohio %>%
  left_join(
    stipends,
    by = "cip2010"
    ) -> mydf

```

+ Some of the CIP codes do not match. Look at History, for example.


```{r, eval=FALSE}

readr::read_csv(
  "oudata/Stipend Analysis FY18-FY23.csv"
  ) %>%
  janitor::clean_names() %>%
  mutate(
    hashid = openssl::md5(pid)
  ) -> stipends

stipends %>%
  select(pid, hashid) -> hash_crosswalk

hash_crosswalk %>%
  write_csv(
    .,
    file = "oudata/hash_crosswalk.csv"
    )

stipends %>%
  relocate(hashid) %>%
  select(- pid) -> stipends

```

## CPI Adjustment

```{r}

readxl::read_excel(
  "SeriesReport-20221208145833_79ca87.xlsx",
  skip = 11
  ) -> cpi_allu

readxl::read_excel(
  "SeriesReport-20221208151855_7c44f7.xlsx",
  skip = 11
  ) -> cpi_midwest_b

cpi_midwest_b %>%
  select(Year, Sep) %>%
  mutate(
    appointment_year = Year + 1
    ) %>%
  filter(
    appointment_year >= 2018
    ) -> cpi_midwest_sub

cpi_midwest_sub %>%
  mutate(
    base = 148.023,
    index = case_when(
      Year == 2017 ~ 100,
      Year > 2017 ~ (Sep / base) * 100
      )
    ) -> cpi_midwest_sub

```

```{r}

load("oudata/stipends.RData")

stipends %>%
  left_join(
    cpi_midwest_sub,
    by = "appointment_year"
    ) -> stipends

stipends %>%
  mutate(
    real_fall_offer_amount = (100 / index) * fall_offer_amount
  ) -> stipends

stipends %>%
  group_by(
    hashid, appointment_year, program_name
    ) %>%
  mutate(
    total_fall_offer_amount = sum(
      fall_offer_amount,
      na.rm = TRUE
      ),
    real_total_fall_offer_amount = sum(
      real_fall_offer_amount,
      na.rm = TRUE
      )
    ) -> stipends

save(stipends, file = "oudata/stipends.RData")

```

